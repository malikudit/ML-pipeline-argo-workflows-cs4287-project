ingress-nginx:
  commonLabels: {}

  controller:
    name: controller
    image:
      chroot: false
      registry: registry.k8s.io
      image: ingress-nginx/controller
      tag: "v1.7.0"
      digest: sha256:7612338342a1e7b8090bef78f2a04fffcadd548ccaabe8a47bf7758ff549a5f7
      digestChroot: sha256:e84ef3b44c8efeefd8b0aa08770a886bfea1f04c53b61b4ba9a7204e9f1a7edc
      pullPolicy: IfNotPresent
      runAsUser: 101
      allowPrivilegeEscalation: true
    existingPsp: ""
    containerName: controller
    containerPort:
      http: 80
      https: 443
    config: {}
    configAnnotations: {}
    proxySetHeaders: {}
    addHeaders: {}
    dnsConfig: {}
    hostname: {}
    dnsPolicy: ClusterFirst

    reportNodeInternalIp: false
    watchIngressWithoutClass: false
    ingressClassByName: false

    enableTopologyAwareRouting: false

    allowSnippetAnnotations: true
    hostNetwork: false
    hostPort:
      enabled: false
      ports:
        http: 80

        https: 443

    electionID: ""
    ingressClassResource:
      name: nginx
      enabled: true
      default: false
      controllerValue: "k8s.io/ingress-nginx"

      parameters: {}

    ingressClass: nginx

    podLabels: {}

    podSecurityContext: {}

    sysctls: {}

    publishService:
      enabled: true
      pathOverride: ""
    scope:
      enabled: false
      namespace: ""
      namespaceSelector: ""
    configMapNamespace: ""
    tcp:
      configMapNamespace: ""
      annotations: {}
    udp:
      configMapNamespace: ""
      annotations: {}
    maxmindLicenseKey: ""
    extraArgs: {}

    extraEnvs: []

    kind: Deployment
    annotations: {}

    labels: {}
    updateStrategy: {}

    minReadySeconds: 0

    tolerations: []

    affinity: {}

    topologySpreadConstraints: []

    terminationGracePeriodSeconds: 300
    nodeSelector:
      kubernetes.io/os: linux

    livenessProbe:
      httpGet:
        path: "/healthz"
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      httpGet:
        path: "/healthz"
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    healthCheckPath: "/healthz"
    healthCheckHost: ""
    podAnnotations: {}
    replicaCount: 1
    minAvailable: 1

    resources:
      requests:
        cpu: 100m
        memory: 90Mi

    autoscaling:
      apiVersion: autoscaling/v2
      enabled: false
      annotations: {}
      minReplicas: 1
      maxReplicas: 11
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
      behavior: {}
    autoscalingTemplate: []

    keda:
      apiVersion: "keda.sh/v1alpha1"
      enabled: false
      minReplicas: 1
      maxReplicas: 11
      pollingInterval: 30
      cooldownPeriod: 300
      restoreToOriginalReplicaCount: false
      scaledObject:
        annotations: {}
      triggers: []

      behavior: {}
    enableMimalloc: true
    customTemplate:
      configMapName: ""
      configMapKey: ""
    service:
      enabled: true
      appProtocol: true
      annotations: {}
      labels: {}
      externalIPs: []

      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      enableHttp: true
      enableHttps: true
      ipFamilyPolicy: "SingleStack"
      ipFamilies:
        - IPv4
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      type: LoadBalancer
      nodePorts:
        http: ""
        https: ""
        tcp: {}
        udp: {}
      external:
        enabled: true
      internal:
        enabled: false
        annotations: {}
        loadBalancerSourceRanges: []
    shareProcessNamespace: false
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    extraInitContainers: []
    extraModules: []

    opentelemetry:
      enabled: false
      image: registry.k8s.io/ingress-nginx/opentelemetry:v20230312-helm-chart-4.5.2-28-g66a760794@sha256:40f766ac4a9832f36f217bb0e98d44c8d38faeccbfe861fbc1a76af7e9ab257f
      containerSecurityContext:
        allowPrivilegeEscalation: false
    admissionWebhooks:
      annotations: {}
      enabled: true
      extraEnvs: []
      failurePolicy: Fail
      port: 8443
      certificate: "/usr/local/certificates/cert"
      key: "/usr/local/certificates/key"
      namespaceSelector: {}
      objectSelector: {}
      labels: {}
      existingPsp: ""
      networkPolicyEnabled: false
      service:
        annotations: {}
        externalIPs: []
        loadBalancerSourceRanges: []
        servicePort: 443
        type: ClusterIP
      createSecretJob:
        securityContext:
          allowPrivilegeEscalation: false
        resources: {}

      patchWebhookJob:
        securityContext:
          allowPrivilegeEscalation: false
        resources: {}
      patch:
        enabled: true
        image:
          registry: registry.k8s.io
          image: ingress-nginx/kube-webhook-certgen
          tag: v20230312-helm-chart-4.5.2-28-g66a760794
          digest: sha256:01d181618f270f2a96c04006f33b2699ad3ccb02da48d0f89b22abce084b292f
          pullPolicy: IfNotPresent

        priorityClassName: ""
        podAnnotations: {}
        nodeSelector:
          kubernetes.io/os: linux
        tolerations: []
        labels: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 2000
          fsGroup: 2000
      certManager:
        enabled: false
        rootCert:
          duration: ""
        admissionCert:
          duration: ""

    metrics:
      port: 10254
      portName: metrics
      enabled: false
      service:
        annotations: {}

        labels: {}

        externalIPs: []
        loadBalancerSourceRanges: []
        servicePort: 10254
        type: ClusterIP

      serviceMonitor:
        enabled: false
        additionalLabels: {}

        namespace: ""
        namespaceSelector: {}

        scrapeInterval: 30s
        targetLabels: []
        relabelings: []
        metricRelabelings: []
      prometheusRule:
        enabled: false
        additionalLabels: {}
        rules: []

    lifecycle:
      preStop:
        exec:
          command:
            - /wait-shutdown
    priorityClassName: ""

  revisionHistoryLimit: 10

  defaultBackend:
    enabled: false
    name: defaultbackend
    image:
      registry: registry.k8s.io
      image: defaultbackend-amd64

      tag: "1.5"
      pullPolicy: IfNotPresent

      runAsUser: 65534
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false

    existingPsp: ""
    extraArgs: {}
    serviceAccount:
      create: true
      name: ""
      automountServiceAccountToken: true

    extraEnvs: []
    port: 8080

    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      failureThreshold: 6
      initialDelaySeconds: 0
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5

    updateStrategy: {}

    minReadySeconds: 0

    tolerations: []

    affinity: {}
    podSecurityContext: {}
    containerSecurityContext: {}
    podLabels: {}

    nodeSelector:
      kubernetes.io/os: linux

    podAnnotations: {}
    replicaCount: 1
    minAvailable: 1
    resources: {}

    extraVolumeMounts: []

    extraVolumes: []

    autoscaling:
      apiVersion: autoscaling/v2
      annotations: {}
      enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    service:
      annotations: {}

      externalIPs: []

      loadBalancerSourceRanges: []
      servicePort: 80
      type: ClusterIP
    priorityClassName: ""

    labels: {}

  rbac:
    create: true
    scope: false

  podSecurityPolicy:
    enabled: false
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}

  imagePullSecrets: []

  tcp: {}

  udp: {}
  portNamePrefix: ""
  dhParam: ""
